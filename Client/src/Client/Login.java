/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import static java.lang.Thread.sleep;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author decla_000
 */
public class Login extends javax.swing.JFrame {
    byte thisByte[] = new byte[1];
    String message;
    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginbtn = new javax.swing.JButton();
        username = new javax.swing.JTextField();
        registerbtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        resultLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loginbtn.setText("Login");
        loginbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginbtnActionPerformed(evt);
            }
        });

        registerbtn.setText("Register");
        registerbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerbtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(resultLabel))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(password)
                    .addComponent(username)
                    .addComponent(loginbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(registerbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginbtn)
                    .addComponent(resultLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registerbtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerbtnActionPerformed
        String textToSend = "Register:U:" + username.getText() + ":P:" + Integer.toString(Arrays.toString(password.getPassword()).hashCode()) + ":END";
        connection network = new connection();
        try {
            network.output.writeObject(textToSend);
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        //network.closeConnection();
    }//GEN-LAST:event_registerbtnActionPerformed

    private void loginbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginbtnActionPerformed
        String textToSend = "Login:U:" + username.getText() + ":P:" + Integer.toString(Arrays.toString(password.getPassword()).hashCode()) + ":END";
        connection network = new connection();
        try {
            network.output.writeObject(textToSend);
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        boolean end = true;        
        while (end){
            String splitArray[];
            try {
                try {
                    message = (String) network.input.readObject();
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }
                splitArray = message.split(":");

                if (splitArray[0].equals("Login")){
                    Client Client = new Client();
                    Client.userId = Integer.parseInt(splitArray[2]);
                    Client.publicChat.chatId = 0;

                    //Create client data from server information
                    textToSend = "RequestData:UserId:" + Client.userId + ":END";
                    //network = new connection();
                    network.output.writeObject(textToSend);
                    Client.network = network;
                    boolean dataEnd = false;
                    try {
                        sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    while(!dataEnd){
                        try {
                            message = (String) network.input.readObject();
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        splitArray = message.split(":");
                        if (splitArray[0].equals("DATAEND")){
                            dataEnd = true;
                        }
                        if (splitArray[0].equals("User")){
                            Player newPlayer = new Player();
                            newPlayer.userId = Integer.parseInt(splitArray[2]);
                            newPlayer.username = splitArray[4];
                            if (splitArray[6].equals("True")){
                                newPlayer.online = true;
                                Client.publicChat.users.add(newPlayer);
                            }
                            Client.userList.add(newPlayer);

                            if (newPlayer.userId == Client.userId){
                                Client.thisPlayer = newPlayer;
                            }
                        }
                        if (splitArray[0].equals("Friend")){
                            Player newPlayer = new Player();
                            for (int i = 0; i < Client.userList.size(); i++){
                                if (Client.userList.get(i).userId == Integer.parseInt(splitArray[2])){
                                    newPlayer = Client.userList.get(i);
                                }
                            }
                            Client.friends.add(newPlayer);
                        }
                        if (splitArray[0].equals("Game")){
                            Game newGame = new Game();
                            newGame.gameId = Integer.parseInt(splitArray[3]);
                            newGame.gameType = new GameType(splitArray[1]);
                            newGame.numberOfPlayers = Integer.parseInt(splitArray[5]);
                            if (splitArray[4].equals("false")){
                                newGame.visible = false;
                            }
                            for (int i = 0; i < Client.userList.size(); i++){
                                if (Client.userList.get(i).userId == Integer.parseInt(splitArray[2])){
                                    newGame.host = Client.userList.get(i);
                                    newGame.hostName = Client.userList.get(i).username;
                                }
                            }
                            newGame.chat.chatId = Integer.parseInt(splitArray[6]);
                            Client.serverList.add(newGame);
                        }
                    }
                    MainView main = new MainView();
                    main.clientData = Client;
                    main.pack();
                    this.setVisible(false);
                    main.setVisible(true);
                    main.run();

                }
                if (splitArray[0].equals("Failed")){
                    resultLabel.setText("Login Failed");
                    break;
                }
                
                end = false;
                message = "";
            } catch (IOException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_loginbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton loginbtn;
    private javax.swing.JPasswordField password;
    private javax.swing.JButton registerbtn;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
